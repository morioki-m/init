{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOi2S0WBPfAPAjSBlnsDPK9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["\n","!pip install japanize_matplotlib | tail -n 1\n","!pip install torchviz | tail -n 1\n","!pip install torchinfo | tail -n 1\n","\n","# coding: utf-8\n","import sys, os\n","sys.path.append(os.pardir)\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import japanize_matplotlib\n","from IPython.display import display\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torchinfo import summary\n","from torchviz import make_dot\n","import torchvision.datasets as datasets\n","import torchvision.transforms as transforms\n","from torch.utils.data import DataLoader\n","\n","def eval_loss(loader, device, net, criterion):\n","\n","    for images, labels in loader:\n","        break\n","\n","    inputs = images.to(device)\n","    labels = labels.to(device)\n","    # 予測計算\n","    outputs = net(inputs)\n","    #  損失計算\n","    loss = criterion(outputs, labels)\n","\n","    return loss\n","\n","\n","def fit(net, optimizer, criterion, num_epochs, train_loader, test_loader, device, history):\n","\n","    from tqdm.notebook import tqdm\n","\n","    base_epochs = len(history)\n","\n","    for epoch in range(base_epochs, num_epochs+base_epochs):\n","        # 1エポックあたりの正解数(精度計算用)\n","        n_train_acc, n_val_acc = 0, 0\n","        # 1エポックあたりの累積損失(平均化前)\n","        train_loss, val_loss = 0, 0\n","        # 1エポックあたりのデータ累積件数\n","        n_train, n_test = 0, 0\n","\n","        net.train()\n","\n","        for inputs, labels in tqdm(train_loader):\n","            train_batch_size = len(labels)\n","            # 1エポックあたりのデータ累積件数\n","            n_train += train_batch_size\n","\n","            inputs = inputs.to(device)\n","            labels = labels.to(device)\n","\n","            # 勾配の初期化\n","            optimizer.zero_grad()\n","\n","            # 予測計算\n","            outputs = net(inputs)\n","\n","            # 損失計算\n","            loss = criterion(outputs, labels)\n","\n","            # 勾配計算\n","            loss.backward()\n","\n","            # パラメータ修正\n","            optimizer.step()\n","\n","            # 予測ラベル導出\n","            predicted = torch.max(outputs, 1)[1]\n","\n","\n","            # 平均前の損失と正解数の計算\n","            # lossは平均計算が行われているので平均前の損失に戻して加算\n","            train_loss += loss.item() * train_batch_size\n","            n_train_acc += (predicted == labels).sum().item()\n","\n","\n","        net.eval()\n","\n","        for inputs_test, labels_test in test_loader:\n","            test_batch_size = len(labels_test)\n","            n_test += test_batch_size\n","\n","            inputs_test = inputs_test.to(device)\n","            labels_test = labels_test.to(device)\n","\n","            outputs_test = net(inputs_test)\n","\n","            loss_test = criterion(outputs_test, labels_test)\n","\n","            predicted_test = torch.max(outputs_test, 1)[1]\n","\n","            val_loss += loss_test.item() * test_batch_size\n","            n_val_acc += (predicted_test == labels_test).sum().item()\n","\n","        train_acc = n_train_acc / n_train\n","        val_acc = n_val_acc / n_test\n","\n","        avg_train_loss = train_loss / n_train\n","        avg_val_loss = val_loss / n_test\n","\n","        print(f'Epoch [{(epoch+1)}/{num_epochs+base_epochs}], loss: {avg_train_loss:.5f} acc: {train_acc:.5f} val_loss: {avg_val_loss:.5f}, val_acc: {val_acc:.5f}')\n","\n","        item = np.array([epoch+1, avg_train_loss, train_acc, avg_val_loss, val_acc])\n","        history = np.vstack((history, item))\n","    return history\n","\n","\n","\n","def evaluate_history(history):\n","    print(f'初期状態: 損失: {history[0,3]:.5f} 精度: {history[0,4]:.5f}')\n","    print(f'最終状態: 損失: {history[-1,3]:.5f} 精度: {history[-1,4]:.5f}')\n","\n","    num_epochs = len(history)\n","    unit = num_epochs / 10\n","\n","    plt.figure(figsize=(9,8))\n","    plt.plot(history[:,0], history[:,1], 'b', label='訓練')\n","    plt.plot(history[:,0], history[:,3], 'k', label='検証')\n","    plt.xticks(np.arange(0,num_epochs+1, unit))\n","    plt.xlabel('繰り返し回数')\n","    plt.ylabel('損失')\n","    plt.title('学習曲線(損失)')\n","    plt.legend()\n","    plt.show()\n","\n","    plt.figure(figsize=(9,8))\n","    plt.plot(history[:,0], history[:,2], 'b', label='訓練')\n","    plt.plot(history[:,0], history[:,4], 'k', label='検証')\n","    plt.xticks(np.arange(0,num_epochs+1,unit))\n","    plt.xlabel('繰り返し回数')\n","    plt.ylabel('精度')\n","    plt.title('学習曲線(精度)')\n","    plt.legend()\n","    plt.show()\n","\n","\n","def show_images_labels(loader, classes, net, device):\n","\n","    # データローダーから最初の1セットを取得する\n","    for images, labels in loader:\n","        break\n","    # 表示数は50個とバッチサイズのうち小さい方\n","    n_size = min(len(images), 50)\n","\n","    if net is not None:\n","        inputs = images.to(device)\n","        labels = labels.to(device)\n","\n","        outputs = net(inputs)\n","        predicted = torch.max(outputs,1)[1]\n","        #images = images.to('cpu')\n","\n","    #最初のn_size個の表示\n","    plt.figure(figsize=(20, 15))\n","    for i in range(n_size):\n","        ax = plt.subplot(5, 10, i + 1)\n","        label_name = classes[labels[i]]\n","        # netがNoneでない場合は、予測結果もタイトルに表示する\n","        if net is not None:\n","            predicted_name = classes[predicted[i]]\n","            # 正解かどうかで色分けをする\n","            if label_name == predicted_name:\n","                c = 'k'\n","            else:\n","                c = 'b'\n","                ax.set_title(label_name + ':' + predicted_name, c=c, fontsize=20)\n","        else:\n","            ax.set_title(label_name, fontsize=20)\n","            # TensorをNumPyに変換\n","            image_np = images[i].numpy().copy()\n","            # 軸の順番変更 (channel, row, column) -> (row, column, channel)\n","            img = np.transpose(image_np, (1, 2, 0))\n","            # 値の範囲を[-1, 1] -> [0, 1]に戻す\n","            img = (img + 1)/2\n","\n","            plt.imshow(img)\n","            ax.set_axis_off()\n","        plt.show()\n","\n","def torch_seed(seed=123):\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.deterministic = True\n","    torch.use_deterministic_algorithms = True"],"metadata":{"id":"3ru8VAR_0ReJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1687318160987,"user_tz":-540,"elapsed":17249,"user":{"displayName":"m morioki","userId":"14439060137722977425"}},"outputId":"94483cc8-04ea-4b7a-bca6-69376684281d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Successfully installed japanize_matplotlib-1.1.3\n","Successfully installed torchviz-0.0.2\n","Successfully installed torchinfo-1.8.0\n"]}]}]}